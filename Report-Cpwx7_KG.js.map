{"version":3,"file":"Report-Cpwx7_KG.js","sources":["../src/components/report/Report.tsx"],"sourcesContent":["import cx from 'classnames';\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage,\n  FieldValidator,\n  type FormikHelpers\n} from 'formik';\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport useAsyncEffect from 'use-async-effect';\n\nimport { API_URL_CONTRIBUTIONREQUEST, API_URL_REPORT } from 'etc/constants';\nimport { StickerPack } from 'etc/types';\nimport { getStickerPack } from 'lib/stickers';\n\n\nexport interface FormValues {\n  secAnswer: string;\n  submitterComments: string;\n}\n\n\n/**\n * URL parameters that we expect to have set when this component is rendered.\n */\nexport interface UrlParams {\n  packId: string;\n}\n\n\n/**\n * Initial values for the form.\n */\nconst initialValues: FormValues = {\n  secAnswer: '',\n  submitterComments: ''\n};\n\n\n/**\n * Validators for each field in our form.\n */\nconst validators: Record<string, FieldValidator> = {\n  secAnswer: (secAnswer: string) => {\n    if (secAnswer === '') {\n      return 'This field is required.';\n    }\n  },\n  submitterComments: (submitterComments: string) => {\n    if (submitterComments.length <= 30) {\n      return 'Please give more details (min 30 chars).';\n    }\n  }\n};\n\n\nexport default function ReportPack() {\n  const [hasBeenSubmitted, setHasBeenSubmitted] = React.useState(false);\n  const [requestSent, setRequestSent] = React.useState(false);\n  const [reportRequestToken, setReportRequestToken] = React.useState('');\n  const [reportRequestQuestion, setReportRequestQuestion] = React.useState('');\n  const { packId } = useParams<UrlParams>();\n  // StickerPack object for the requested pack.\n  const [stickerPack, setStickerPack] = React.useState<StickerPack>();\n\n  /**\n   * [Effect] Set `stickerPack` when the component mounts.\n   */\n  useAsyncEffect(async () => {\n    try {\n      if (!packId) {\n        return;\n      }\n\n      setStickerPack(await getStickerPack(packId));\n    } catch {\n      // TODO: Handle errors.\n    }\n  }, [packId]);\n\n  /**\n   * Get a ContributionRequest token and question\n   */\n  const fetchReportRequest = () => {\n    void fetch(API_URL_CONTRIBUTIONREQUEST, { // We use the same URL API than the contribution request\n      method: 'POST',\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(async x => x.json())\n      .then(x => {\n        setReportRequestQuestion(x.contribution_question);\n        setReportRequestToken(x.contribution_id);\n      });\n  };\n\n  /**\n   * Get a ContributionRequest at loading\n   */\n  React.useEffect(() => {\n    setTimeout(() => {\n      fetchReportRequest();\n    }, 3000); // Delaying the query helps reducing the load\n  }, []);\n\n  /**\n   * Sets 'hasBeenSubmitted' when the Submit button is clicked. We need this\n   * because Formik will not call our onSubmit function when the submit button\n   * is clicked _but_ validation fails. This makes sense, but because we want to\n   * change the way validation errors are presented to the user after the first\n   * submit attempt, we need to track \"attempts\" separately.\n   */\n  const onSubmitClick = React.useCallback(() => {\n    setHasBeenSubmitted(true);\n  }, [setHasBeenSubmitted]);\n\n  /**\n   * Called when the form is submitted and has passed validation.\n   */\n  const onSubmit = React.useCallback(\n    (values: FormValues, { setErrors, setSubmitting }: FormikHelpers<FormValues>) => {\n      const reportData = {\n        contribution_id: reportRequestToken,\n        contribution_answer: values.secAnswer,\n        pack_id: packId,\n        content: values.submitterComments\n      };\n\n      void fetch(API_URL_REPORT, {\n        method: 'PUT',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reportData)\n      }).then(async response =>\n        response\n          .json()\n          .then(data => ({\n            data: data,\n            status: response.status\n          }))\n          .then(res => {\n            if (res.status === 400) {\n              setErrors({\n                secAnswer: res.data.error\n              });\n              setRequestSent(false);\n              setSubmitting(false);\n              return;\n            }\n            setRequestSent(true);\n            window.scrollTo({\n              top: document.body.scrollHeight,\n              behavior: 'smooth'\n            });\n          })\n      );\n    },\n    [reportRequestQuestion, reportRequestToken]\n  );\n\n\n  return (\n    <div className=\"my-4 p-lg-3 px-lg-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h1 className=\"mb-4\">Report a pack</h1>\n          <div className=\"mt-lg-3 mb-4\">\n            <p>Use this form to report a pack to Signalstickers' admins.</p>\n            <p>Please add context and explain why you are reporting this pack.</p>\n          </div>\n        </div>\n      </div>\n      <hr className=\"pt-3 pb-2\" />\n      <div className=\"row\">\n        <div className=\"col-12 col-md-10 offset-md-1\">\n          <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validateOnChange={hasBeenSubmitted}\n            validateOnBlur={hasBeenSubmitted}\n          >\n            {({ errors, isValidating, isSubmitting }) => (\n              <Form noValidate>\n\n                {/* [Field] Pack title */}\n                <div className=\"form-group\">\n                  <div className=\"form-row\">\n                    <label className=\"col-12\" htmlFor=\"pack-title\">\n                      Pack to report\n                      <Field\n                        type=\"text\"\n                        id=\"pack-title\"\n                        name=\"pack-title\"\n                        className=\"form-control mt-2\"\n                        disabled\n                        value={stickerPack?.manifest.title}\n                      />\n                    </label>\n                  </div>\n                </div>\n\n                {/* [Field] Submitter comments */}\n                <div className=\"form-group\">\n                  <div className=\"form-row\">\n                    <label\n                      className={cx(\n                        'col-12',\n                        errors.submitterComments && 'text-danger'\n                      )}\n                      htmlFor=\"submitterComments\"\n                    >\n                      Why are you reporting this pack?\n                      <Field\n                        as=\"textarea\"\n                        type=\"textarea\"\n                        id=\"submitterComments\"\n                        name=\"submitterComments\"\n                        className={cx('form-control mt-2', errors.submitterComments && 'is-invalid')}\n                        disabled={requestSent}\n                        validate={validators.submitterComments}\n                        maxLength=\"1999\"\n                      />\n                      <small className=\"form-text text-muted\">\n                        Please add details about your report. Do not enter\n                        personal information.\n                      </small>\n                      <div className=\"invalid-feedback\">\n                        <ErrorMessage name=\"submitterComments\" />\n                        &nbsp;\n                      </div>\n                    </label>\n                  </div>\n                </div>\n\n                {/* [Field] Security answer */}\n                <div className=\"form-group\">\n                  <div className=\"form-row\">\n                    <label\n                      className={cx(\n                        'col-12',\n                        errors.secAnswer && 'text-danger'\n                      )}\n                      htmlFor=\"secAnswer\"\n                    >\n                      {reportRequestQuestion}\n                      <Field\n                        type=\"text\"\n                        id=\"secAnswer\"\n                        name=\"secAnswer\"\n                        validate={validators.secAnswer}\n                        className={cx('form-control', 'mt-2', errors.secAnswer && 'is-invalid')}\n                        disabled={requestSent}\n                      />\n                      <small className=\"form-text text-muted\">\n                        This question helps us to make sure that you are not a\n                        robot. The answer is a single word or number, without\n                        quotes.\n                      </small>\n                      <div className=\"invalid-feedback\">\n                        <ErrorMessage name=\"secAnswer\" />\n                        &nbsp;\n                      </div>\n                    </label>\n                  </div>\n                </div>\n\n                {/* [Control] Submit */}\n                <div className=\"form-group\">\n                  <div className=\"form-row\">\n                    <div className=\"col-12\">\n                      <button\n                        type=\"submit\"\n                        className={`btn btn-block btn-lg ${\n                          requestSent ? 'btn-success' : 'btn-primary '\n                        }`}\n                        disabled={isSubmitting || isValidating || requestSent}\n                        onClick={onSubmitClick}\n                      >\n                        {requestSent ? (\n                          <span>Report sent, thanks!</span>\n                        ) : (\n                          <span>Report</span>\n                        )}\n                        {isSubmitting}\n                      </button>\n                      {requestSent ? (\n                        <Link\n                          type=\"reset\"\n                          className=\"btn btn-block btn-lg btn-primary\"\n                          to=\"/\"\n                        >\n                          Return to homepage\n                        </Link>\n                      ) :\n                        ''\n                      }\n                    </div>\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["jsxs","jsx"],"mappings":"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"}