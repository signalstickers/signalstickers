{"version":3,"mappings":"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","names":["jsx","R.omit","Context","Provider","initialState","R.mapObjIndexed","state","jsxs","Fragment","AppStateContext","classes","saturate","darken","lighten","Navbar","path","R.path","R.split","R.type","R.compose","R.filter","R.gte","R.propOr","R.uniqBy","R.forEach","R.toPairs","R.values","query","R.forEachObjIndexed","R.join","R.prepend","R.memoizeWith","R.identity","R.innerJoin","converter","R.find","R.test","R.prop","R.pathEq","R.map","AppStateContextProvider","StickersContextProvider","Router"],"ignoreList":[],"sources":["../src/assets/favicon.png","../src/components/general/ExternalLink.tsx","../src/contexts/AppStateContext.tsx","../src/components/layout/Navbar.tsx","../src/components/layout/SuspenseFallback.tsx","../src/etc/colors.ts","../src/components/layout/AppLayout.tsx","../src/lib/search/constants.ts","../src/lib/search/index.ts","../src/etc/constants.ts","../src/lib/convert-image.ts","../src/lib/error.ts","../src/lib/utils.ts","../src/lib/stickers.ts","../src/contexts/StickersContext.tsx","../src/components/App.tsx","../src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__DEFwtOII__\"","import * as R from 'ramda';\nimport React from 'react';\n\n\nexport type ExternalLinkProps = Omit<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, 'target' | 'rel'>;\n\n\n/**\n * Renders an anchor element with appropriate `target` and `rel` attributes\n * pre-applied for external links.\n */\nconst ExternalLink = React.memo(React.forwardRef((props: ExternalLinkProps, ref?: React.Ref<HTMLAnchorElement>) => (\n  <a\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n    ref={ref}\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    {...R.omit(['children', 'ref'], props)}\n  >\n    {props.children}\n  </a>\n)));\n\nExternalLink.displayName = 'ExternalLink';\n\n\nexport default ExternalLink;\n","/* eslint-disable react/jsx-no-bind */\nimport * as R from 'ramda';\nimport React from 'react';\n\n\n// ----- Types -----------------------------------------------------------------\n\n/**\n * Type of the value provided by this Context: a custom hook function that\n * accepts a key and returns tuple with a value of type T and a setValue\n * function that accepts a value of type T.\n */\nexport type AppStateContext = <T = any>(key: string) => [\n  T | undefined,\n  React.Dispatch<React.SetStateAction<T>>\n];\n\n\n/**\n * The context's state is a map that mirrors key/value pairs in Local Storage.\n * We keep this in-memory mapping to avoid having to read from Local Storage on\n * each re-render.\n */\ninterface State {\n  [index: string]: any;\n}\n\n\n/**\n * Action type for our reducer.\n */\ninterface SetStateAction {\n  key: string;\n  value: any;\n}\n\n\n// ----- Initial State ---------------------------------------------------------\n\nconst initialState: State = {\n  darkMode: false\n};\n\n\n// ----- Context ---------------------------------------------------------------\n\nconst Context = React.createContext<AppStateContext>({} as any);\n\n\nexport function Provider(props: React.PropsWithChildren<Record<string, unknown>>) {\n  /**\n   * Initializes app state by iterating over each key in our initial state\n   * object and fetching the corresponding value from Local Storage.\n   */\n  const initializer = (initialState: State): State => {\n    return R.mapObjIndexed((initialValue, key) => {\n      try {\n        return JSON.parse(localStorage.getItem(key) ?? initialValue);\n      } catch {\n        // Local storage may be unavailable. Return the initial value.\n        return initialValue;\n      }\n    }, initialState);\n  };\n\n  /**\n   * Handles state updates by setting values in Local Storage.\n   */\n  const reducer = (state: State, action: SetStateAction): State => {\n    try {\n      localStorage.setItem(String(action.key), JSON.stringify(action.value));\n    } catch {\n      // Local storage may not be available due to private mode, etc.\n    }\n\n    return {...state, [action.key]: action.value};\n  };\n\n  const [state, dispatch] = React.useReducer(reducer, initialState, initializer);\n\n  // N.B. There seems to be a parsing error with TSX + arrow functions that use\n  // generic type parameters. Re-visit in the future.\n  // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n  function useAppState<T = any>(key: string) {\n    const setState: React.Dispatch<React.SetStateAction<T>> = (value: React.SetStateAction<T>) => {\n      dispatch({key, value});\n    };\n\n    return [state[key], setState] as any;\n  }\n\n  return (\n    <Context.Provider value={useAppState}>\n      {props.children}\n    </Context.Provider>\n  );\n}\n\n\nexport default Context;\n","import cx from 'classnames';\nimport React from 'react';\nimport { BsBoxArrowUpRight, BsList } from 'react-icons/bs';\nimport { FaGithub, FaRss } from 'react-icons/fa';\nimport { FiSun, FiMoon } from 'react-icons/fi';\nimport { SiKofi } from 'react-icons/si';\nimport { Link, NavLink } from 'react-router-dom';\n\nimport signalStickersLogoUrl from 'assets/favicon.png';\nimport ExternalLink from 'components/general/ExternalLink';\nimport AppStateContext from 'contexts/AppStateContext';\n\nimport classes from './Navbar.css';\n\n\ninterface NavLinkDescriptor {\n  title: string;\n  href: string;\n  external?: boolean;\n  children?: React.ReactElement;\n}\n\n\nconst navLinks: Array<NavLinkDescriptor> = [{\n  title: 'Contribute',\n  href: '/contribute'\n}, {\n  title: 'About',\n  href: '/about'\n}, {\n  title: 'Help Signalstickers to stay alive!',\n  href: 'https://ko-fi.com/signalstickers',\n  external: true,\n  children: <>\n    <SiKofi className=\"d-none d-md-inline\" /> Donate\n    <span className=\"d-md-none\">\n      &nbsp;on Ko-Fi <BsBoxArrowUpRight />\n    </span>\n  </>\n}, {\n  title: 'RSS',\n  href: 'https://api.signalstickers.org/feed/rss/',\n  external: true,\n  children: <>\n    <span className=\"d-md-none\">\n      RSS <BsBoxArrowUpRight />\n    </span>\n    <FaRss className=\"d-none d-md-inline\" />\n  </>\n}, {\n  title: 'GitHub Repository',\n  href: 'https://github.com/signalstickers/signalstickers',\n  external: true,\n  children: <>\n    <span className=\"d-md-none\">\n      GitHub <BsBoxArrowUpRight />\n    </span>\n    <FaGithub className=\"d-none d-md-inline\" />\n  </>\n}];\n\n\nconst NAVBAR_TOGGLE_ID = 'navbar-toggle';\n\n\nexport default function NavbarComponent() {\n  const useAppState = React.useContext(AppStateContext);\n  const [darkMode, setDarkMode] = useAppState<boolean>('darkMode');\n\n\n  /**\n   * Toggles dark mode.\n   */\n  const toggleDarkMode = React.useCallback(() => {\n    setDarkMode(!darkMode);\n  }, [darkMode]);\n\n\n  /**\n   * Closes the navigation menu (on small devices) upon navigation.\n   */\n  const collapseNavigation = React.useCallback(() => {\n    // @ts-expect-error\n    $(`#${NAVBAR_TOGGLE_ID}`).collapse('hide');\n  }, []);\n\n\n  return (\n    <nav className={cx(classes.navbar, 'navbar navbar-expand-md navbar-dark')}>\n      <div className=\"container\">\n        <Link\n          to=\"/\"\n          className=\"navbar-brand\"\n          onClick={collapseNavigation}\n        >\n          <img src={signalStickersLogoUrl} alt=\"Signal Stickers Logo\" /> Signal Stickers\n        </Link>\n        <button\n          type=\"button\"\n          className=\"navbar-toggler\"\n          data-toggle=\"collapse\"\n          data-target={`#${NAVBAR_TOGGLE_ID}`}\n          aria-controls={NAVBAR_TOGGLE_ID}\n          aria-expanded=\"false\"\n          aria-label=\"Toggle Navigation\"\n        >\n          <BsList className=\"menu-icon\" />\n        </button>\n        <div id={NAVBAR_TOGGLE_ID} className=\"collapse navbar-collapse\">\n          <ul className=\"navbar-nav ml-auto mt-2 mt-md-0 pb-xs-0\">\n            {navLinks.map(navLink => (\n              <li className=\"nav-item\" key={navLink.href}>\n                {navLink.external ?\n                  <ExternalLink\n                    href={navLink.href}\n                    title={navLink.title}\n                    className=\"nav-link py-3 py-md-2\"\n                  >\n                    {navLink.children ?? navLink.title}\n                  </ExternalLink> :\n                  <NavLink\n                    to={navLink.href}\n                    title={navLink.title}\n                    className=\"nav-link py-3 py-md-2\"\n                    activeClassName=\"active\"\n                    onClick={collapseNavigation}\n                  >\n                    {navLink.children ?? navLink.title}\n                  </NavLink>\n                }\n              </li>\n            ))}\n            <li className=\"nav-item\">\n              <button\n                type=\"button\"\n                className=\"btn btn-link nav-link py-3 py-md-2\"\n                title=\"Dark Mode\"\n                onClick={toggleDarkMode}\n              >\n                {darkMode ?\n                  <>\n                    <span className=\"d-inline-block d-md-none mr-1\">\n                      Light mode\n                    </span>\n                    <FiSun />\n                  </>\n                  :\n                  <>\n                    <span className=\"d-inline-block d-md-none mr-1\">\n                      Dark mode\n                    </span>\n                    <FiMoon />\n                  </>}\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from 'react';\n\n\nexport default function SuspenseFallback() {\n  const [showSpinner, setShowSpinner] = React.useState(false);\n\n  /**\n   * Time in milliseconds to wait after the component mounts before showing the\n   * loading spinner. Hiding the spinner on faster page transitions can improve\n   * perceived performance.\n   */\n  const SPINNER_DELAY = 2000;\n\n  React.useEffect(() => {\n    const timeoutHandle = setTimeout(() => {\n      setShowSpinner(true);\n    }, SPINNER_DELAY);\n\n    return () => {\n      clearTimeout(timeoutHandle);\n    };\n  }, []);\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-center flex-grow-1\">\n      {showSpinner && (\n        <div\n          className=\"spinner-border\"\n          role=\"status\"\n          style={{\n            borderWidth: '2px',\n            color: 'rgba(0, 0, 0, 0.5)'\n          }}\n        >\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {darken, lighten, saturate} from 'polished';\n\n\n/**\n * Saturated version of Bootstrap's --danger color.\n */\nexport const DANGER_SATURATED = saturate(0.2, '#DC3545');\n\n\n/**\n * Darker version of Bootstrap's --gray color.\n */\nexport const GRAY_DARKER = darken(0.1, '#6C757D');\n\n\n/**\n * (Even) darker version of Bootstrap's --gray color.\n */\nexport const GRAY_DARKER_2 = darken(0.255, '#6C757D');\n\n\n/**\n * Lighter version of Bootstrap's --gray color.\n */\nexport const GRAY_LIGHTER = lighten(0.18, '#6C757D');\n\n\n/**\n * Darker version of Bootstrap's --primary color.\n */\nexport const PRIMARY_DARKER = darken(0.15, '#007BFF');\n\n\n/**\n * Lighter version of Bootstrap's --primary color.\n */\nexport const PRIMARY_LIGHTER = lighten(0.2, '#007BFF');\n\n\n/**\n * Darker version of Bootstrap's --gray-dark color.\n *\n * Used as the background color for primary content containers in dark mode.\n */\nexport const DARK_THEME_BACKGROUND = darken(0.01, '#343A40');\n","import pThrottle from 'p-throttle';\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n// @ts-expect-error\nimport { useScrollPercentage } from 'react-scroll-percentage';\nimport useAsyncEffect from 'use-async-effect';\n\nimport Navbar from 'components/layout/Navbar';\nimport SuspenseFallback from 'components/layout/SuspenseFallback';\nimport AppStateContext from 'contexts/AppStateContext';\nimport { PRIMARY_DARKER } from 'etc/colors';\n\nimport classes from './AppLayout.css';\n\n\n// Note: Each top-level route should be imported az a lazy-loaded component.\nconst Home = React.lazy(async () => import('components/home/Home'));\nconst Pack = React.lazy(async () => import('components/pack/StickerPackDetail'));\nconst Contribute = React.lazy(async () => import('components/contribute/Contribute'));\nconst ContributionStatus = React.lazy(async () => import('components/contributionstatus/ContributionStatus'));\nconst About = React.lazy(async () => import('components/about/About'));\nconst Report = React.lazy(async () => import('components/report/Report'));\n\n\nexport default function AppLayout() {\n  const useAppState = React.useContext(AppStateContext);\n  const [darkMode] = useAppState<boolean>('darkMode');\n  const [ref, percentage] = useScrollPercentage();\n\n\n  /**\n   * [Effect]\n   *\n   * Apply classes to <body> to indicate the current theme. We do this here\n   * (even though we are a child of <body>) because this is the highest level\n   * React component in our tree that renders actual HTML.\n   */\n  React.useEffect(() => {\n    const bodyEl = document.querySelector('body');\n\n    if (!bodyEl) {\n      return;\n    }\n\n    if (darkMode) {\n      bodyEl.classList.add('theme-dark');\n      bodyEl.classList.remove('theme-light');\n    } else {\n      bodyEl.classList.add('theme-light');\n      bodyEl.classList.remove('theme-dark');\n    }\n  }, [darkMode]);\n\n\n  /**\n   * [Effect]\n   *\n   * Ensures that the background color shown during over-scroll matches adjacent\n   * content. Unfortunately the only way this can be reliably done at the moment\n   * is by changing the body's background color. To minimize performance impact,\n   * we run this function asynchronously and throttle calls to a maximum of 10\n   * times per second.\n   */\n  useAsyncEffect(pThrottle(() => {\n    const bodyEl = document.querySelector('body');\n\n    if (!bodyEl) {\n      return;\n    }\n\n    if (darkMode) {\n      bodyEl.style.backgroundColor = percentage < 0.5 ? PRIMARY_DARKER : 'var(--dark)';\n    } else {\n      bodyEl.style.backgroundColor = percentage < 0.5 ? 'var(--primary)' : 'var(--white)';\n    }\n  }, 10, 1000), [percentage, darkMode]);\n\n\n  return (<>\n    <Navbar />\n    <div className={classes.container} ref={ref}>\n      <div className=\"container d-flex flex-column flex-grow-1\">\n        <React.Suspense fallback={<SuspenseFallback />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/pack/:packId/report\">\n              <Report />\n            </Route>\n            <Route path=\"/pack/:packId\">\n              <Pack />\n            </Route>\n            <Route path=\"/contribute\">\n              <Contribute />\n            </Route>\n            <Route path=\"/contribution-status\">\n              <ContributionStatus />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n        </React.Suspense>\n      </div>\n    </div>\n  </>);\n}\n","/**\n * Base configuration object for Fuse.\n */\nexport const BASE_CONFIG = {\n  includeScore: true,\n  ignoreLocation: true,\n  minMatchCharLength: 2,\n  shouldSort: true,\n  threshold: 0\n};\n\n\n/**\n * Maximum 'score' a search result can have. Results with a higher score will\n * be filtered-out.\n *\n * N.B. With Fuse.js, a score of 0 represents a perfect match, and a score of 1\n * represents a result that did not match anything in the query.\n */\nexport const MAX_SCORE = 0.05;\n\n\n/**\n * Key used in our Map of searchers to reference the general-purpose Fuse\n * instance.\n */\nexport const GENERAL_SEARCHER = Symbol('GENERAL');\n\n\n/**\n * Matches a quoted attribute search expression. This format is used when the\n * query contains whitespace.\n *\n * Ex: `author:\"Frodo Baggins\"`\n */\nexport const QUOTED_EXPRESSION_PATTERN = /(?<attribute>[^\\s\":]+):\"(?<query>[^\":]+)\"/g;\n\n\n/**\n * Matches an unquoted attribute search expression.\n *\n * Ex: `tag:cute`\n */\nexport const UNQUOTED_EXPRESSION_PATTERN = /(?<attribute>[^\\s\":]+):(?<query>[^\\s\":]+)/g;\n","/**\n * ===== Search ================================================================\n *\n * This module provides a fuzzy searching facility that supports broad as well\n * as targeted queries. It must be configured with a collection of\n * uniformly-shaped objects. These objects should contain at least 1 key that\n * may be used to uniquely identify them.\n *\n * Query Grammar\n * -------------\n *\n * A simple query will perform a fuzzy search on all configured attributes in a\n * collection. Users may also perform a query on a specific attribute using the\n * following grammar:\n *\n * '<attribute>:<query>'\n *\n * If `query` contains whitespace, the <query> portion may be wrapped in double\n * quotation marks:\n *\n * '<attribute>:\"<query>\"'\n *\n * Queries may include any combination of attribute selectors as well as general\n * search terms:\n *\n * '<term> <term> <attribute>:<query> <attribute>:\"<query>\" <term>'\n *\n * -----------------------------------------------------------------------------\n *\n * See: https://fusejs.io/\n */\nimport Fuse from 'fuse.js';\nimport * as R from 'ramda';\n\nimport {\n  BASE_CONFIG,\n  GENERAL_SEARCHER,\n  MAX_SCORE,\n  QUOTED_EXPRESSION_PATTERN,\n  UNQUOTED_EXPRESSION_PATTERN\n} from './constants';\nimport {\n  AttributeQuery,\n  ParsedQuery\n} from './types';\n\n\n/**\n * Utility type that, provided the member type of a collection, represents a\n * collection of search results.\n */\nexport type SearchResults<T> = Array<Fuse.FuseResult<T>>;\n\n\n/**\n * Options object accepted by SearchFactory.\n */\nexport interface SearchFactoryOptions<T> {\n  /**\n   * Collection to search on. Each item in the collection should be of the same\n   * type.\n   */\n  collection: Array<T>;\n\n  /**\n   * Function that will be invoked when checking whether two items should be\n   * considered equal. The function will be passed an item from the collection\n   * and should return a primitive value used for comparison (ex: ID).\n   */\n  identity: (item: T) => string | number | boolean | undefined;\n\n  /**\n   * Mapping of attribute shorthand terms (used in search queries) to arrays\n   * representing paths where that attribute can be found in each item in the\n   * collection. Single mappings are used for attribute queries, and all\n   * attributes are included when performing general queries.\n   *\n   * See: https://fusejs.io/examples.html#nested-search\n   */\n  keys: {\n    [key: string]: Fuse.FuseOptionKey<T>;\n  };\n}\n\n\n/**\n * Object returned by SearchFactory.\n */\nexport interface Search<T> {\n  /**\n   * Provided a query string, performs a search on `collection` and returns a\n   * result set.\n   */\n  search: (queryString: string) => SearchResults<T>;\n\n  /**\n   * Provided a query string, returns a query object.\n   *\n   * @example\n   *\n   * searcher.parseQueryString(`tag:cute doge amaze`) //=> {\n   *   query: 'doge amaze',\n   *   attributeQueries: [\n   *     {tag: 'cute'}\n   *   ]\n   * }\n   */\n  parseQueryString: (query: string) => ParsedQuery;\n\n  /**\n   * Provided a query object, returns a query string.\n   *\n   * @example\n   *\n   * searcher.buildQueryString({\n   *   query: 'elephant',\n   *   attributeQueries: [\n   *     {tag: 'animal'},\n   *     {tag: 'for children'}\n   *   ]\n   * }) //=> 'elephant tag:animal tag:\"for children\"'\n   */\n  buildQueryString: (queryObject: ParsedQuery) => string;\n}\n\n\n/**\n * Provided a SearchFactoryOptions object, returns a Search object.\n */\nexport default function SearchFactory<T>(options: SearchFactoryOptions<T>): Search<T> {\n\n  // ----- Private Members -----------------------------------------------------\n\n  /**\n   * @private\n   *\n   * Keep a cache of Fuse instances for each attribute that we search on. This\n   * prevents unnecessary re-indexing.\n   */\n  const searchers = new Map<string | number | symbol, Fuse<T>>();\n\n\n  // ----- Private Methods -----------------------------------------------------\n\n  /**\n   * @private\n   *\n   * Custom Fuse.js \"getter\" function that will be invoked when traversing paths\n   * in collection members. The function is responsible for returning the value\n   * at the indicated path which, per Fuse requirements, must be a string or an\n   * array of strings. By using a custom function, we can type-cast non-string\n   * values to strings for the purposes of matching search results. This will\n   * allow the user to use attribute queries such as 'original:true' or\n   * 'nsfw:false'.\n   */\n  const customGetFn = (item: T, path: string | Array<string>) => {\n    const value = R.path(Array.isArray(path) ? path : R.split('.', path), item);\n    const valueType = R.type(value);\n\n    switch (valueType) {\n      case 'String':\n        return String(value);\n      case 'Array':\n        return value as Array<string>;\n      // Cast booleans and numbers using the String constructor, yielding\n      // results like 'true', 'false'.\n      case 'Boolean':\n      case 'Number':\n        return String(value);\n      // For bottom values, return 'false'. This allows queries on attributes\n      // where the absence of that attribute implies `false`, such as 'nsfw' and\n      // 'original'.\n      case 'Null':\n      case 'Undefined':\n        return 'false';\n      default:\n        throw new Error(`[Search::getFn] Unable to parse value of type \"${valueType}\" at path \"${String(path)}\".`);\n    }\n  };\n\n\n  /**\n   * @private\n   *\n   * Provided a string, returns the number of words therein.\n   */\n  const wordCount = (input: string): number => input.split(/\\s+/g).length;\n\n\n  /**\n   * @private\n   *\n   * Filters and de-dupes search results that are collected from multiple Fuse\n   * instances.\n   */\n  const processResults = (results: SearchResults<T>): SearchResults<T> => {\n    return R.compose(\n      // Filter-out results with a score above MAX_SCORE.\n      R.filter(R.compose(R.gte(MAX_SCORE), R.propOr(undefined, 'score'))),\n      // De-dupe results by calling the configured identity callback.\n      R.uniqBy<Fuse.FuseResult<T>, any>(result => options.identity(result.item))\n    )(results);\n  };\n\n\n  /**\n   * @private\n   *\n   * Create Fuse instances for each configured attribute as well as a general\n   * instance that searches across all configured attributes.\n   */\n  const createFuseInstances = (collection: Array<T>) => {\n    R.forEach(([attribute, path]) => {\n      searchers.set(attribute, new Fuse(collection, {\n        ...BASE_CONFIG,\n        getFn: customGetFn,\n        keys: [path]\n      }));\n    }, R.toPairs(options.keys ?? []));\n\n    searchers.set(GENERAL_SEARCHER, new Fuse(collection, {\n      ...BASE_CONFIG,\n      getFn: customGetFn,\n      keys: R.values(options.keys)\n    }));\n  };\n\n\n  // ----- Public Methods ------------------------------------------------------\n\n  const parseQueryString = (query: string): ParsedQuery => {\n    let remainingQuery = query;\n    const attributeQueries: Array<AttributeQuery> = [];\n\n    R.forEach((curPattern: RegExp) => {\n      if (remainingQuery.length === 0) {\n        return;\n      }\n\n      R.forEach((match: RegExpMatchArray) => {\n        if (!match.groups) {\n          return;\n        }\n\n        const attribute = match.groups.attribute.trim();\n        const query = match.groups.query.trim();\n\n        // Determine if the provided attribute is valid by checking if we have\n        // a dedicated searcher for it.\n        const isValidAttribute = searchers.has(attribute);\n\n        // If 'attribute' matched from the query string does not match a\n        // configured attribute, leave the entire term in the query string,\n        // allowing it to be used as a general search term.\n        if (!isValidAttribute) {\n          return;\n        }\n\n        // Remove the matched term from the query string.\n        remainingQuery = remainingQuery.replace(match[0], '').trim();\n\n        attributeQueries.push({ [attribute]: query });\n      }, [...remainingQuery.matchAll(curPattern)]);\n    }, [\n      UNQUOTED_EXPRESSION_PATTERN,\n      QUOTED_EXPRESSION_PATTERN\n    ]);\n\n    return {\n      query: remainingQuery.trim(),\n      attributeQueries\n    };\n  };\n\n\n  const buildQueryString = (queryObject: ParsedQuery): string => {\n    const queryTerms: Array<string> = [];\n\n    R.forEach(R.forEachObjIndexed((query, attribute) => {\n      const isValidAttribute = searchers.has(attribute);\n\n      if (!isValidAttribute) {\n        throw new Error(`[Search::buildQueryString] Unknown attribute: \"${attribute}\".`);\n      }\n\n      const formattedQuery = wordCount(query) > 1 ? `\"${query}\"` : query;\n      queryTerms.push(`${attribute}:${formattedQuery}`);\n    }), queryObject.attributeQueries ?? []);\n\n    return R.join(' ', R.prepend(queryObject.query, queryTerms)).trim();\n  };\n\n\n  const search = R.memoizeWith(R.identity, (queryString: string) => {\n    let results: SearchResults<T> = [];\n    const { query, attributeQueries } = parseQueryString(queryString);\n\n    // Perform an attribute search for each attribute query.\n    R.forEach(R.forEachObjIndexed((attributeQuery, attribute) => {\n      if (!attributeQuery) {\n        return;\n      }\n\n      const searcherForAttribute = searchers.get(attribute);\n\n      if (!searcherForAttribute) {\n        return;\n      }\n\n      const resultsForAttribute = searcherForAttribute.search(attributeQuery);\n\n      // eslint-disable-next-line unicorn/prefer-ternary\n      if (results.length === 0) {\n        // If this is the first query that produced results, set results array\n        // directly.\n        results = resultsForAttribute;\n      } else {\n        // Otherwise, only add those results from this attribute search that are\n        // _also_ in the existing result set. This effectively gives us a\n        // logical \"and\" when handling multiple attribute queries.\n        results = R.innerJoin((a, b) => {\n          return options.identity(a.item) === options.identity(b.item);\n        }, results, resultsForAttribute);\n      }\n    }), attributeQueries ?? []);\n\n    // Then, perform a search with the remaining portion of the query using the\n    // general purpose Fuse instance.\n    if (query) {\n      const querySearcher = searchers.get(GENERAL_SEARCHER);\n\n      if (querySearcher) {\n        const queryResults = querySearcher.search(query);\n\n        results = results.length === 0 ? queryResults : R.innerJoin((a, b) => {\n          return options.identity(a.item) === options.identity(b.item);\n        }, results, queryResults);\n      } else {\n        throw new Error('[Search] Unable to find the generic searcher.');\n      }\n    }\n\n    return processResults(results);\n  });\n\n\n  // ----- Initialization ------------------------------------------------------\n\n  createFuseInstances(options.collection);\n\n\n  return {\n    search,\n    parseQueryString,\n    buildQueryString\n  };\n}\n","/**\n * Mapping of Bootstrap 4 breakpoint names to their minWidths.\n */\nexport const BOOTSTRAP_BREAKPOINTS = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200\n};\n\n\n/**\n * Height of the navbar (px).\n */\nexport const NAVBAR_HEIGHT = 64;\n\n\n/**\n * Value of the query parameter used to track the current search query.\n */\nexport const SEARCH_QUERY_PARAM = 's';\n\n\n/**\n * Regular expression used to validate signal.art URLs for sticker packs, with\n * groups [_, pack_id, pack_key]\n */\nexport const SIGNAL_ART_URL_PATTERN = /^https:\\/\\/signal.art\\/addstickers\\/#pack_id=([\\dA-Za-z]{32})&pack_key=([\\dA-Za-z]{64})$/g;\n\n/**\n * API urls\n */\nexport const API_BASE_URL = import.meta.env.SIGNALSTICKERS_API_URL;\n\nexport const API_URL_CONTRIBUTIONREQUEST = `${API_BASE_URL}/contributionrequest/`;\nexport const API_URL_CONTRIBUTE = `${API_BASE_URL}/contribute/`;\nexport const API_URL_PACKS = `${API_BASE_URL}/packs/`;\nexport const API_URL_PACKS_PING = `${API_BASE_URL}/ping/`;\nexport const API_URL_STATUS = `${API_BASE_URL}/packs/status/`;\nexport const API_URL_REPORT = `${API_BASE_URL}/report/`;\n","/**\n * ===== Image Converter =======================================================\n *\n * This module is responsible for converting WebP images to PNG images on\n * browsers that do not support WebP. Because we will be getting multiple\n * simultaneous calls to this function when the site loads, we use an\n * asynchronous task queue to limit concurrency of image conversion jobs.\n */\nimport imageType from 'image-type';\nimport pQueue from 'p-queue';\nimport pWaitFor from 'p-wait-for';\nimport {detectWebpSupport} from 'webp-hero/dist/detect-webp-support';\n\nimport type { WebpMachine } from 'webp-hero/dist/webp-machine';\n\n\n/**\n * Caches our WebP converter instance so we only import/instantiate it once.\n */\nlet converter: Promise<WebpMachine> | undefined;\n\n\n/**\n * Dynamically imports web-hero, creates a converter instance, and returns a\n * Promise that resolves with the instance. This allows us to load this module\n * (which is rather large) only when we need to use it, and also ensures we only\n * import/instantiate it once.\n */\nasync function importWebpHero() {\n  if (!converter) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    converter = new Promise(async resolve => {\n      const modules = await Promise.all([\n        import(\n          /* webpackChunkName: \"webp-hero\" */\n          'webp-hero/libwebp/dist/webp.js'\n        ),\n        import(\n          /* webpackChunkName: \"webp-hero-machine\" */\n          'webp-hero/dist/webp-machine'\n        )\n      ]);\n\n      const {Webp} = modules[0];\n      const {WebpMachine, defaultDetectWebpImage} = modules[1];\n\n      // One of Webp Hero's dependencies seems to block user input when a\n      // conversion is run. This fix can be found here:\n      // See: https://github.com/chase-moskal/webp-hero/issues/18#issuecomment-560188272\n      const webp = new Webp();\n      webp.Module.doNotCaptureKeyboard = true;\n\n      resolve(new WebpMachine({\n        webp,\n        webpSupport: detectWebpSupport(),\n        detectWebpImage: defaultDetectWebpImage\n      }));\n    });\n  }\n\n  return converter;\n}\n\n\n// ----- Locals ----------------------------------------------------------------\n\n/**\n * Ensures we check for WebP support only once.\n */\nconst hasWebpSupportPromise = detectWebpSupport();\n\n/**\n * Module-local asynchronous queue facility that will allow us to limit the\n * number of concurrent image conversion operations.\n */\nconst imageConversionQueue = new pQueue({concurrency: 1});\n\n\n// ----- Functions -------------------------------------------------------------\n\n/**\n * Provided a UInt8Array or Buffer containing image data, returns the image's\n * MIME type.\n */\n// eslint-disable-next-line no-undef\nfunction getImageMimeType(rawImageData: Uint8Array | Buffer): string {\n  const typeInfo = imageType(rawImageData);\n\n  if (!typeInfo) {\n    throw new Error('[getImageMimeType] Unable to determine MIME type of image.');\n  }\n\n  return typeInfo.mime;\n}\n\n\n/**\n * Converts a Uint8Array to a base-64 encoded string.\n */\nfunction uInt8ToBase64(data: Uint8Array): string {\n  let strData = '';\n\n  for (const byte of data) {\n    // eslint-disable-next-line unicorn/prefer-code-point\n    strData += String.fromCharCode(byte);\n  }\n\n  return btoa(strData);\n}\n\n\n/**\n * If the browser has WebP support, the image data is converted into a base-64\n * encoded string and returned. Otherwise, the image is converted to PNG using\n * webp-hero and returned as a base-64 encoded string. Both variants are\n * suitable for using in the \"src\" attribute of an img tag.\n */\nexport async function convertImage(rawImageData: Uint8Array) {\n  const mimeType = getImageMimeType(rawImageData);\n  const hasWebpSupport = await hasWebpSupportPromise;\n\n  // If the image is WebP and the browser lacks support for WebP, convert the\n  // image to PNG. This will take a noticeable amount of time/memory on the\n  // user's machine, but is the only way we can display these images at this\n  // time.\n  if (mimeType === 'image/webp' && !hasWebpSupport) {\n    return imageConversionQueue.add(async () => {\n      try {\n        const converter = await importWebpHero();\n        // @ts-expect-error (`busy` is not an exposed member of WebpMachine.)\n        await pWaitFor(() => converter.busy === false);\n        return await converter.decode(rawImageData);\n      } catch (err: any) {\n        console.error(`[convertImage] Image conversion failed: ${err.message}`);\n        throw err;\n      }\n    });\n  }\n\n  return `data:${mimeType};base64,${uInt8ToBase64(rawImageData)}`;\n}\n","export default class ErrorWithCode extends Error {\n  code: string;\n\n\n  constructor(code: string | undefined, message: string) {\n    super(message);\n    this.code = code ?? 'UNKNOWN';\n  }\n\n\n  static from = (code: string, err: Error) => {\n    const errWithCode = new ErrorWithCode(code, err.message);\n    // @ts-expect-error\n    errWithCode.stack = err.stack;\n    return errWithCode;\n  };\n}\n","import bytes from 'bytes';\nimport * as R from 'ramda';\n\nimport { BOOTSTRAP_BREAKPOINTS, API_URL_PACKS_PING } from 'etc/constants';\n\n\n/**\n * Prints current storage usage and quotas to the console.\n */\nexport async function printStorageUsage() {\n  if (import.meta.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const storageEstimate = navigator.storage && await navigator.storage.estimate();\n\n    // The navigator.storage object is undefined when using private mode in\n    // Safari.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!storageEstimate) {\n      return;\n    }\n\n    // @ts-ignore (usageDetails is not typed correctly).\n    const idbUsage = storageEstimate?.usageDetails?.indexedDB;\n    const quota = storageEstimate.quota;\n\n    if (idbUsage && quota) {\n      const percentageUsed = (idbUsage / quota * 100).toFixed(2);\n      console.debug(`IndexedDB is currently using ${bytes(idbUsage)} of data, or ${percentageUsed}% of the ${bytes(quota)} quota.`);\n    }\n  }\n}\n\n\n/**\n * Bootstrap media query helper for CSS-in-JS.\n *\n * @example\n *\n * @media ${bp('sm')} {\n *   // ...\n * }\n */\nexport function bp(bpName: keyof typeof BOOTSTRAP_BREAKPOINTS, minMax: 'min' | 'max' = 'min') {\n  const bpValue = BOOTSTRAP_BREAKPOINTS[bpName];\n\n  if (bpValue === undefined) {\n    throw new Error(`Invalid breakpoint: ${bpName}`);\n  }\n\n  const value = minMax === 'min' ? bpValue : bpValue - 1;\n\n  return `(${minMax}-width: ${value}px)`;\n}\n\n\n/**\n * Used for analytics.\n */\nexport function sendPackBeacon(packId: string) {\n  if (import.meta.env.NODE_ENV === 'production') {\n    try {\n      const beaconData = new Blob([`target=${packId}`], { type: 'application/x-www-form-urlencoded' });\n      navigator.sendBeacon(API_URL_PACKS_PING, beaconData);\n    } catch (err: any) {\n      console.log(`${err}. No worries, it's okay!`);\n    }\n  }\n}\n\n/**\n * Used for analytics.\n */\nexport function sendHomeBeacon() {\n  sendPackBeacon('home');\n}\n\n\n/**\n * Returns true if the provided error was thrown because the browser is blocking\n * use of local storage and/or other storage back-ends.\n */\nexport function isStorageUnavailableError(err: any) {\n  const patterns = [\n    // Firefox in private mode.\n    /the quota has been exceeded/gi\n  ];\n\n  if (err?.message) {\n    return Boolean(R.find(curPattern => R.test(curPattern, err.message), patterns));\n  }\n\n  return false;\n}\n","// ===== Stickers Module =======================================================\n\n/**\n * This module contains several functions for loading, fetching, decrypting, and\n * caching stickers. Most notably, we fall back to a WebP-toPNG conversion when\n * on browsers that do not natively support WebP. It should be noted that this\n * process is time/CPU intensive and can cause have a significant performance\n * impact on the user's experience. Through queueing and max concurrency\n * settings, Safari seems to be able to handle this load without issue (albeit\n * far more slowly than Chrome).\n */\nimport {\n  getStickerPackManifest,\n  getStickerInPack\n\n} from '@signalstickers/stickers-client';\nimport axios from 'axios';\nimport LocalForage from 'localforage';\nimport * as R from 'ramda';\n\nimport { API_URL_PACKS } from 'etc/constants';\nimport {\n  StickerPack,\n  StickerPackPartial,\n  StickerPackMetadata\n} from 'etc/types';\nimport { convertImage } from 'lib/convert-image';\nimport ErrorWithCode from 'lib/error';\nimport { isStorageUnavailableError } from 'lib/utils';\n\n\n// ----- Locals ----------------------------------------------------------------\n\n/**\n * Promise that will resolve with the list of sticker packs enumerated in\n * stickers.yaml. This collection will contain only those data from a\n * StickerPack that we want to search on or that we need to display a sticker\n * pack preview card. We use a promise here rather than the array itself to\n * ensure that if multiple calls to getStickerPackDirectory are made before the\n * initial request for partials.json resolves, we only make a single request\n * and only populate the directory once.\n */\nlet stickerPackDirectoryPromise: Promise<Array<StickerPackPartial>> | undefined;\n\n\n/**\n * In-memory cache of StickerPack objects.\n */\nconst stickerPackCache = new Map<string, StickerPack>();\n\n\n/**\n * Module-local browser-storage-backed cache used for sticker image data.\n */\nconst stickerImageCache = LocalForage.createInstance({\n  name: 'Signal Stickers',\n  storeName: 'Image Cache'\n});\n\n\n// ----- Functions -------------------------------------------------------------\n\n/**\n * Resolves with a list of StickerPackPartial objects.\n */\nexport async function getStickerPackDirectory(): Promise<Array<StickerPackPartial>> {\n  if (!stickerPackDirectoryPromise) {\n    stickerPackDirectoryPromise = axios.request<Array<StickerPackPartial>>({\n      method: 'GET',\n      url: API_URL_PACKS\n    }).then(R.prop('data'));\n  }\n\n  return stickerPackDirectoryPromise;\n}\n\n\n/**\n * Provided a sticker pack ID and optional key, queries the Signal API and\n * resolves with 'full' StickerPack object.\n */\nexport async function getStickerPack(id: string, key?: string): Promise<StickerPack> {\n  const cacheKey = key ? `${id}-${key}` : id;\n\n  try {\n    if (!stickerPackCache.has(cacheKey)) {\n      const directory = await getStickerPackDirectory();\n\n      // Build the metadata object using information from a StickerPackPartial\n      // in the directory or, if the requested sticker pack is unlisted, just\n      // the id and key.\n      const partial = R.find<StickerPackPartial>(R.pathEq(id, ['meta', 'id']), directory);\n\n      // Use the key from the directory if possible. Otherwise, use the key\n      // provided by the caller.\n      const finalKey = partial?.meta.key ?? key;\n\n      if (!finalKey) {\n        throw new ErrorWithCode('NO_KEY_PROVIDED', `No key provided for unlisted pack: ${id}.`);\n      }\n\n      const meta: StickerPackMetadata = partial ? {\n        ...partial.meta,\n        unlisted: false\n      } : {\n        id,\n        key: finalKey,\n        unlisted: true\n      };\n\n      const manifest = await getStickerPackManifest(id, finalKey);\n\n      const stickerPack = {\n        meta,\n        manifest\n      } as StickerPack;\n\n      stickerPackCache.set(cacheKey, stickerPack);\n    }\n\n    return stickerPackCache.get(cacheKey) as StickerPack;\n  } catch (err: any) {\n    if (err.isAxiosError && err.response.status === 403) {\n      throw new ErrorWithCode('MANIFEST_DECRYPT', `[getStickerPack] ${err.stack}`);\n    }\n\n    throw new ErrorWithCode(err.code, `[getStickerPack] ${err.stack}`);\n  }\n}\n\n\n/**\n * Provided a sticker pack ID, pack key, and sticker ID, and queries the Signal\n * API and resolves with a base-64 encoded string containing either WebP or PNG\n * data (based on client support for the former) for the indicated sticker.\n */\nexport async function getConvertedStickerInPack(id: string, key: string, stickerId: number): Promise<string> {\n  let convertedImage = '';\n\n  try {\n    const cacheKey = `${id}-${stickerId}`;\n\n    const imageFromCache = await stickerImageCache.getItem<string | undefined>(cacheKey);\n\n    if (!imageFromCache) {\n      const rawImageData = await getStickerInPack(id, key, stickerId);\n      convertedImage = await convertImage(rawImageData);\n\n      // This line may throw when in private mode in certain browsers.\n      await stickerImageCache.setItem(cacheKey, convertedImage);\n\n      return convertedImage;\n    }\n\n    return await stickerImageCache.getItem(cacheKey) as string;\n  } catch (err: any) {\n    if (!isStorageUnavailableError(err)) {\n      throw new Error(`[getConvertedStickerInPack] Error getting sticker: ${err.message}`);\n    }\n  }\n\n  // This should only be reachable if we got a \"storage unavailable error\", in\n  // which case return the converted image.\n  return convertedImage;\n}\n\n\nexport {getEmojiForSticker} from '@signalstickers/stickers-client';\n","import * as R from 'ramda';\nimport React from 'react';\nimport useAsyncEffect from 'use-async-effect';\n\nimport { StickerPackPartial, StickerPackMetadata } from 'etc/types';\nimport SearchFactory, { SearchResults, Search } from 'lib/search';\nimport { getStickerPackDirectory } from 'lib/stickers';\n\n/**\n * Shape of the object provided by this Context.\n */\nexport interface StickersContext {\n  /**\n   * List of all sticker packs known to the application.\n   */\n  allStickerPacks: Array<StickerPackPartial> | undefined;\n\n  /**\n   * Searcher instance.\n   */\n  searcher?: Search<StickerPackPartial>;\n\n  /**\n   * Current search query. This is persisted here so that should the user return\n   * to the search page, their query and results will be preserved.\n   */\n  searchQuery: string;\n\n  /**\n   * Current result set based on the current value of search Query.\n   */\n  searchResults: SearchResults<StickerPackPartial>;\n\n  /**\n   * Allows a consumer to set the current search query, which will in turn\n   * update the current search results.\n   */\n  setSearchQuery: (needle: string) => void;\n\n  /**\n   * Current sort order\n   */\n  sortOrder: string;\n\n  /**\n   * Allows a consumer to set the sort order\n   */\n  setSortOrder: (sortOrder: string) => void;\n\n  /**\n   * Either show or hide NSFW content\n   */\n  showNsfw: boolean;\n\n  /**\n   * Allow a consumer to show or hide NSFW content\n   */\n  setShowNsfw: (show: boolean) => void;\n}\n\n\nconst Context = React.createContext<StickersContext>({} as any);\n\n\nexport const Provider = (props: React.PropsWithChildren<Record<string, unknown>>) => {\n  const [allStickerPacks, setAllStickerPacks] = React.useState<StickersContext['allStickerPacks']>();\n  const [searcher, setSearcher] = React.useState<Search<StickerPackPartial>>();\n  const [searchQuery, setSearchQuery] = React.useState<StickersContext['searchQuery']>('');\n  const [sortOrder, setSortOrder] = React.useState<StickersContext['sortOrder']>('');\n  const [searchResults, setSearchResults] = React.useState<StickersContext['searchResults']>([]);\n  const [showNsfw, setShowNsfw] = React.useState(false);\n\n\n  /**\n   * [Effect] When the context mounts, set the list of sticker packs from\n   * partials.json and set-up the initial search results.\n   */\n  useAsyncEffect(async () => {\n    // Load the set of sticker packs we need from partials.json.\n    const stickerPacks = await getStickerPackDirectory();\n\n    // Set the canonical list of all sticker packs.\n    setAllStickerPacks(stickerPacks);\n\n    // Create a searcher using our collection of sticker pack partials.\n    setSearcher(SearchFactory({\n      collection: stickerPacks,\n      identity: R.path(['meta', 'id']),\n      keys: {\n        title: ['manifest', 'title'],\n        author: ['manifest', 'author'],\n        tag: ['meta', 'tags'],\n        nsfw: ['meta', 'nsfw'],\n        original: ['meta', 'original'],\n        animated: ['meta', 'animated'],\n        editorschoice: ['meta', 'editorschoice']\n      }\n    }));\n  }, []);\n\n\n  /**\n   * [Effect] Update `searchResults` when `searchQuery` changes. This effect\n   * will also set the default set of search results to `allStickerPacks` if\n   * there is no query.\n   */\n  React.useEffect(() => {\n    if (!allStickerPacks || !searcher) {\n      return;\n    }\n\n\n    // If there is currently no query, set the search results to the result of\n    // mapping the full list of sticker packs into a list with the same shape\n    // returned by the search function.\n    if (searchQuery.length === 0) {\n      // Default ordering\n      let orderedSearchResults = R.map(stickerPack => ({\n        item: stickerPack\n      }), allStickerPacks);\n\n      let sortKey = ''; // Key to sort by in StickerPackMetadata\n      switch (sortOrder) {\n        case 'trending':\n          sortKey = 'hotviews';\n          break;\n        case 'mostViewed':\n          sortKey = 'totalviews';\n          break;\n      }\n\n      if (sortKey) {\n        orderedSearchResults = orderedSearchResults.sort((a, b) => (\n          (a.item.meta[sortKey as keyof StickerPackMetadata] ?? 0) > (b.item.meta[sortKey as keyof StickerPackMetadata] ?? 0) ? -1 : 1\n        ));\n      }\n\n      setSearchResults(orderedSearchResults as SearchResults<StickerPackPartial>);\n      return;\n    }\n\n    setSearchResults(searcher.search(searchQuery));\n  }, [\n    allStickerPacks,\n    searcher,\n    searchQuery,\n    sortOrder,\n    showNsfw\n  ]);\n\n\n  // ----- Render --------------------------------------------------------------\n\n  return (\n    <Context.Provider\n      // @ts-expect-error\n      value={{\n        allStickerPacks,\n        searcher,\n        searchQuery,\n        searchResults,\n        setSearchQuery,\n        sortOrder,\n        setSortOrder,\n        showNsfw,\n        setShowNsfw\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\n\nexport default Context;\n","import React from 'react';\nimport { IconContext } from 'react-icons';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport AppLayout from 'components/layout/AppLayout';\nimport { Provider as AppStateContextProvider } from 'contexts/AppStateContext';\nimport { Provider as StickersContextProvider } from 'contexts/StickersContext';\nimport { sendHomeBeacon } from 'lib/utils';\n\n\nexport default function App() {\n  sendHomeBeacon();\n\n  return (\n    <React.StrictMode>\n      <IconContext.Provider\n        value={{\n          className: 'icon',\n          style: {\n            lineHeight: '1em',\n            verticalAlign: '-0.125em',\n            minHeight: '1em',\n            minWidth: '1em'\n          }\n        }}\n      >\n        <AppStateContextProvider>\n          <StickersContextProvider>\n            <Router>\n              <AppLayout />\n            </Router>\n          </StickersContextProvider>\n        </AppStateContextProvider>\n      </IconContext.Provider>\n    </React.StrictMode>\n  );\n}\n","import { render } from '@darkobits/tsx/lib/runtime';\n\nimport App from 'components/App';\nimport { printStorageUsage } from 'lib/utils';\n// import './index.css';\nimport 'etc/global-styles.css';\n\nvoid printStorageUsage();\n\nrender('#root', <App />);\n"],"file":"index-lLzZPlSr.js"}